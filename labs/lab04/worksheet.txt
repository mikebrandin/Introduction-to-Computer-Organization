Mike Brandin CPSC 2310 LAB 4

1. What is the address (in hexadecimal) of the first and last instruction in the loop?

	First: 0x00010534
	Last: 0x0001055c

2. Is the loop of the "while(condition)-do", "repeat-until(condition)", or "do-while(condition)" form?

	"repeat-until(condition)"

3. Do the values of 'x' increase or decrease?

	increase


4. In the form of "b *ADDRESS", what is the command to set a breakpoint on the line where you can observe the new value of 'y' after it is calculated? Actually use "print $r0" to check and make sure the register you think is 'y' has been updated and has the correct value.

	b 34

5. What two gdb commands can you enter so that at each and every step, gdb will print both the decimal and hexadecimal form of the value 'y'?

	display /x $r1 and display /d $r1

6. The loop as written only calculates the value of 'y' for the values of 'x' between 0 and 9. It should calculate the value of 'y' for all values of 'x' between 0 and 10. Why does the loop stop at 9 and what change would fix it?

	Change instruction on line 41 from blt to ble so that the 10 is inclusive.

7. Correct the code in "loop.s", assemble and step through the program again in gdb. Fill in the following table:

register        register                register
   x               y                       y
(counter)       (decimal)               (hexadecimal)

   0            _____7_____             ____0x7_____________

   1            ____-1_____             ____0xffffffff______

   2            ____-9_____             ____0xfffffff7______

   3            ____-17____             ____0xffffffef______

   4            ____-25____             ____0xffffffe7_____

   5            ____-33____             ____0xffffffdf______

   6            ____-41____             ____0xffffffd7______

   7            ____-49_____            ____0xffffffcf______

   8            ____-57_____            ____0xffffffc7______

   9            ____-65_____            ____0xffffffbf______

  10            ____-73_____            ____0xffffffb7______


=====================
 Octal Dump Questions
=====================

8. What type of data is in the source file?

	Octal data.

9. What type of data is in the executable?

	Also octal data.

BONUS:

10. Use the directory list command (ls -l) to determine the size of your source file (loop.s) and the executable (loop). How do the files compare in size? Which is bigger? In order to get any credit you must also explain why it is bigger.

	loop is much larger (520 times) in size than loop.s because executable files 
	generate code in conjunction with other libraries causing a larger file size.
